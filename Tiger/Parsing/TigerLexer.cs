//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.6
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from D:\Zchool\Computer Science\4º\VII Semestre\Complementos de Compilación\Tiger\Tiger\Parsing\Tiger.g4 by ANTLR 4.6

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.Text;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.6")]
[System.CLSCompliant(false)]
public partial class TigerLexer : Lexer {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, T__7=8, T__8=9, 
		T__9=10, T__10=11, T__11=12, T__12=13, T__13=14, T__14=15, T__15=16, T__16=17, 
		T__17=18, T__18=19, T__19=20, T__20=21, T__21=22, T__22=23, T__23=24, 
		T__24=25, T__25=26, T__26=27, T__27=28, T__28=29, T__29=30, T__30=31, 
		T__31=32, T__32=33, T__33=34, T__34=35, T__35=36, T__36=37, T__37=38, 
		T__38=39, T__39=40, COMMENT=41, STRING=42, INTEGER=43, ID=44, WS=45;
	public static string[] modeNames = {
		"DEFAULT_MODE"
	};

	public static readonly string[] ruleNames = {
		"T__0", "T__1", "T__2", "T__3", "T__4", "T__5", "T__6", "T__7", "T__8", 
		"T__9", "T__10", "T__11", "T__12", "T__13", "T__14", "T__15", "T__16", 
		"T__17", "T__18", "T__19", "T__20", "T__21", "T__22", "T__23", "T__24", 
		"T__25", "T__26", "T__27", "T__28", "T__29", "T__30", "T__31", "T__32", 
		"T__33", "T__34", "T__35", "T__36", "T__37", "T__38", "T__39", "LETTER", 
		"DIGIT", "ESCAPE_SEQ", "CHAR", "EMPTY", "COMMENT", "STRING", "INTEGER", 
		"ID", "WS"
	};


	public TigerLexer(ICharStream input)
		: base(input)
	{
		Interpreter = new LexerATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	private static readonly string[] _LiteralNames = {
		null, "'nil'", "'-'", "'*'", "'/'", "'+'", "'<>'", "'='", "'>='", "'<='", 
		"'>'", "'<'", "'&'", "'|'", "':='", "'('", "','", "')'", "';'", "'{'", 
		"'}'", "'['", "']'", "'of'", "'if'", "'then'", "'else'", "'while'", "'do'", 
		"'for'", "'to'", "'break'", "'let'", "'in'", "'end'", "'.'", "'type'", 
		"'var'", "':'", "'function'", "'array'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, "COMMENT", "STRING", "INTEGER", "ID", "WS"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "Tiger.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string[] ModeNames { get { return modeNames; } }

	public override string SerializedAtn { get { return _serializedATN; } }

	static TigerLexer() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}
	private static string _serializedATN = _serializeATN();
	private static string _serializeATN()
	{
	    StringBuilder sb = new StringBuilder();
	    sb.Append("\x3\x430\xD6D1\x8206\xAD2D\x4417\xAEF1\x8D80\xAADD\x2/\x128");
		sb.Append("\b\x1\x4\x2\t\x2\x4\x3\t\x3\x4\x4\t\x4\x4\x5\t\x5\x4\x6\t\x6");
		sb.Append("\x4\a\t\a\x4\b\t\b\x4\t\t\t\x4\n\t\n\x4\v\t\v\x4\f\t\f\x4\r");
		sb.Append("\t\r\x4\xE\t\xE\x4\xF\t\xF\x4\x10\t\x10\x4\x11\t\x11\x4\x12");
		sb.Append("\t\x12\x4\x13\t\x13\x4\x14\t\x14\x4\x15\t\x15\x4\x16\t\x16\x4");
		sb.Append("\x17\t\x17\x4\x18\t\x18\x4\x19\t\x19\x4\x1A\t\x1A\x4\x1B\t\x1B");
		sb.Append("\x4\x1C\t\x1C\x4\x1D\t\x1D\x4\x1E\t\x1E\x4\x1F\t\x1F\x4 \t ");
		sb.Append("\x4!\t!\x4\"\t\"\x4#\t#\x4$\t$\x4%\t%\x4&\t&\x4\'\t\'\x4(\t");
		sb.Append("(\x4)\t)\x4*\t*\x4+\t+\x4,\t,\x4-\t-\x4.\t.\x4/\t/\x4\x30\t");
		sb.Append("\x30\x4\x31\t\x31\x4\x32\t\x32\x4\x33\t\x33\x3\x2\x3\x2\x3\x2");
		sb.Append("\x3\x2\x3\x3\x3\x3\x3\x4\x3\x4\x3\x5\x3\x5\x3\x6\x3\x6\x3\a");
		sb.Append("\x3\a\x3\a\x3\b\x3\b\x3\t\x3\t\x3\t\x3\n\x3\n\x3\n\x3\v\x3\v");
		sb.Append("\x3\f\x3\f\x3\r\x3\r\x3\xE\x3\xE\x3\xF\x3\xF\x3\xF\x3\x10\x3");
		sb.Append("\x10\x3\x11\x3\x11\x3\x12\x3\x12\x3\x13\x3\x13\x3\x14\x3\x14");
		sb.Append("\x3\x15\x3\x15\x3\x16\x3\x16\x3\x17\x3\x17\x3\x18\x3\x18\x3");
		sb.Append("\x18\x3\x19\x3\x19\x3\x19\x3\x1A\x3\x1A\x3\x1A\x3\x1A\x3\x1A");
		sb.Append("\x3\x1B\x3\x1B\x3\x1B\x3\x1B\x3\x1B\x3\x1C\x3\x1C\x3\x1C\x3");
		sb.Append("\x1C\x3\x1C\x3\x1C\x3\x1D\x3\x1D\x3\x1D\x3\x1E\x3\x1E\x3\x1E");
		sb.Append("\x3\x1E\x3\x1F\x3\x1F\x3\x1F\x3 \x3 \x3 \x3 \x3 \x3 \x3!\x3");
		sb.Append("!\x3!\x3!\x3\"\x3\"\x3\"\x3#\x3#\x3#\x3#\x3$\x3$\x3%\x3%\x3");
		sb.Append("%\x3%\x3%\x3&\x3&\x3&\x3&\x3\'\x3\'\x3(\x3(\x3(\x3(\x3(\x3(");
		sb.Append("\x3(\x3(\x3(\x3)\x3)\x3)\x3)\x3)\x3)\x3*\x3*\x3+\x3+\x3,\x3");
		sb.Append(",\x3,\a,\xEE\n,\f,\xE,\xF1\v,\x3,\x5,\xF4\n,\x3-\x3-\x5-\xF8");
		sb.Append("\n-\x3.\x3.\x3/\x3/\x3/\x3/\x3/\a/\x101\n/\f/\xE/\x104\v/\x3");
		sb.Append("/\x3/\x3/\x3/\x3/\x3\x30\x3\x30\a\x30\x10D\n\x30\f\x30\xE\x30");
		sb.Append("\x110\v\x30\x3\x30\x3\x30\x3\x31\x6\x31\x115\n\x31\r\x31\xE");
		sb.Append("\x31\x116\x3\x32\x3\x32\x3\x32\x3\x32\a\x32\x11D\n\x32\f\x32");
		sb.Append("\xE\x32\x120\v\x32\x3\x33\x6\x33\x123\n\x33\r\x33\xE\x33\x124");
		sb.Append("\x3\x33\x3\x33\x3\x102\x2\x34\x3\x3\x5\x4\a\x5\t\x6\v\a\r\b");
		sb.Append("\xF\t\x11\n\x13\v\x15\f\x17\r\x19\xE\x1B\xF\x1D\x10\x1F\x11");
		sb.Append("!\x12#\x13%\x14\'\x15)\x16+\x17-\x18/\x19\x31\x1A\x33\x1B\x35");
		sb.Append("\x1C\x37\x1D\x39\x1E;\x1F= ?!\x41\"\x43#\x45$G%I&K\'M(O)Q*S");
		sb.Append("\x2U\x2W\x2Y\x2[\x2]+_,\x61-\x63.\x65/\x3\x2\a\x4\x2\x43\\\x63");
		sb.Append("|\x3\x2\x32;\x6\x2$$ppttvv\x3\x2\"\x80\x5\x2\v\f\xF\xF\"\"\x12D");
		sb.Append("\x2\x3\x3\x2\x2\x2\x2\x5\x3\x2\x2\x2\x2\a\x3\x2\x2\x2\x2\t\x3");
		sb.Append("\x2\x2\x2\x2\v\x3\x2\x2\x2\x2\r\x3\x2\x2\x2\x2\xF\x3\x2\x2\x2");
		sb.Append("\x2\x11\x3\x2\x2\x2\x2\x13\x3\x2\x2\x2\x2\x15\x3\x2\x2\x2\x2");
		sb.Append("\x17\x3\x2\x2\x2\x2\x19\x3\x2\x2\x2\x2\x1B\x3\x2\x2\x2\x2\x1D");
		sb.Append("\x3\x2\x2\x2\x2\x1F\x3\x2\x2\x2\x2!\x3\x2\x2\x2\x2#\x3\x2\x2");
		sb.Append("\x2\x2%\x3\x2\x2\x2\x2\'\x3\x2\x2\x2\x2)\x3\x2\x2\x2\x2+\x3");
		sb.Append("\x2\x2\x2\x2-\x3\x2\x2\x2\x2/\x3\x2\x2\x2\x2\x31\x3\x2\x2\x2");
		sb.Append("\x2\x33\x3\x2\x2\x2\x2\x35\x3\x2\x2\x2\x2\x37\x3\x2\x2\x2\x2");
		sb.Append("\x39\x3\x2\x2\x2\x2;\x3\x2\x2\x2\x2=\x3\x2\x2\x2\x2?\x3\x2\x2");
		sb.Append("\x2\x2\x41\x3\x2\x2\x2\x2\x43\x3\x2\x2\x2\x2\x45\x3\x2\x2\x2");
		sb.Append("\x2G\x3\x2\x2\x2\x2I\x3\x2\x2\x2\x2K\x3\x2\x2\x2\x2M\x3\x2\x2");
		sb.Append("\x2\x2O\x3\x2\x2\x2\x2Q\x3\x2\x2\x2\x2]\x3\x2\x2\x2\x2_\x3\x2");
		sb.Append("\x2\x2\x2\x61\x3\x2\x2\x2\x2\x63\x3\x2\x2\x2\x2\x65\x3\x2\x2");
		sb.Append("\x2\x3g\x3\x2\x2\x2\x5k\x3\x2\x2\x2\am\x3\x2\x2\x2\to\x3\x2");
		sb.Append("\x2\x2\vq\x3\x2\x2\x2\rs\x3\x2\x2\x2\xFv\x3\x2\x2\x2\x11x\x3");
		sb.Append("\x2\x2\x2\x13{\x3\x2\x2\x2\x15~\x3\x2\x2\x2\x17\x80\x3\x2\x2");
		sb.Append("\x2\x19\x82\x3\x2\x2\x2\x1B\x84\x3\x2\x2\x2\x1D\x86\x3\x2\x2");
		sb.Append("\x2\x1F\x89\x3\x2\x2\x2!\x8B\x3\x2\x2\x2#\x8D\x3\x2\x2\x2%\x8F");
		sb.Append("\x3\x2\x2\x2\'\x91\x3\x2\x2\x2)\x93\x3\x2\x2\x2+\x95\x3\x2\x2");
		sb.Append("\x2-\x97\x3\x2\x2\x2/\x99\x3\x2\x2\x2\x31\x9C\x3\x2\x2\x2\x33");
		sb.Append("\x9F\x3\x2\x2\x2\x35\xA4\x3\x2\x2\x2\x37\xA9\x3\x2\x2\x2\x39");
		sb.Append("\xAF\x3\x2\x2\x2;\xB2\x3\x2\x2\x2=\xB6\x3\x2\x2\x2?\xB9\x3\x2");
		sb.Append("\x2\x2\x41\xBF\x3\x2\x2\x2\x43\xC3\x3\x2\x2\x2\x45\xC6\x3\x2");
		sb.Append("\x2\x2G\xCA\x3\x2\x2\x2I\xCC\x3\x2\x2\x2K\xD1\x3\x2\x2\x2M\xD5");
		sb.Append("\x3\x2\x2\x2O\xD7\x3\x2\x2\x2Q\xE0\x3\x2\x2\x2S\xE6\x3\x2\x2");
		sb.Append("\x2U\xE8\x3\x2\x2\x2W\xEA\x3\x2\x2\x2Y\xF7\x3\x2\x2\x2[\xF9");
		sb.Append("\x3\x2\x2\x2]\xFB\x3\x2\x2\x2_\x10A\x3\x2\x2\x2\x61\x114\x3");
		sb.Append("\x2\x2\x2\x63\x118\x3\x2\x2\x2\x65\x122\x3\x2\x2\x2gh\ap\x2");
		sb.Append("\x2hi\ak\x2\x2ij\an\x2\x2j\x4\x3\x2\x2\x2kl\a/\x2\x2l\x6\x3");
		sb.Append("\x2\x2\x2mn\a,\x2\x2n\b\x3\x2\x2\x2op\a\x31\x2\x2p\n\x3\x2\x2");
		sb.Append("\x2qr\a-\x2\x2r\f\x3\x2\x2\x2st\a>\x2\x2tu\a@\x2\x2u\xE\x3\x2");
		sb.Append("\x2\x2vw\a?\x2\x2w\x10\x3\x2\x2\x2xy\a@\x2\x2yz\a?\x2\x2z\x12");
		sb.Append("\x3\x2\x2\x2{|\a>\x2\x2|}\a?\x2\x2}\x14\x3\x2\x2\x2~\x7F\a@");
		sb.Append("\x2\x2\x7F\x16\x3\x2\x2\x2\x80\x81\a>\x2\x2\x81\x18\x3\x2\x2");
		sb.Append("\x2\x82\x83\a(\x2\x2\x83\x1A\x3\x2\x2\x2\x84\x85\a~\x2\x2\x85");
		sb.Append("\x1C\x3\x2\x2\x2\x86\x87\a<\x2\x2\x87\x88\a?\x2\x2\x88\x1E\x3");
		sb.Append("\x2\x2\x2\x89\x8A\a*\x2\x2\x8A \x3\x2\x2\x2\x8B\x8C\a.\x2\x2");
		sb.Append("\x8C\"\x3\x2\x2\x2\x8D\x8E\a+\x2\x2\x8E$\x3\x2\x2\x2\x8F\x90");
		sb.Append("\a=\x2\x2\x90&\x3\x2\x2\x2\x91\x92\a}\x2\x2\x92(\x3\x2\x2\x2");
		sb.Append("\x93\x94\a\x7F\x2\x2\x94*\x3\x2\x2\x2\x95\x96\a]\x2\x2\x96,");
		sb.Append("\x3\x2\x2\x2\x97\x98\a_\x2\x2\x98.\x3\x2\x2\x2\x99\x9A\aq\x2");
		sb.Append("\x2\x9A\x9B\ah\x2\x2\x9B\x30\x3\x2\x2\x2\x9C\x9D\ak\x2\x2\x9D");
		sb.Append("\x9E\ah\x2\x2\x9E\x32\x3\x2\x2\x2\x9F\xA0\av\x2\x2\xA0\xA1\a");
		sb.Append("j\x2\x2\xA1\xA2\ag\x2\x2\xA2\xA3\ap\x2\x2\xA3\x34\x3\x2\x2\x2");
		sb.Append("\xA4\xA5\ag\x2\x2\xA5\xA6\an\x2\x2\xA6\xA7\au\x2\x2\xA7\xA8");
		sb.Append("\ag\x2\x2\xA8\x36\x3\x2\x2\x2\xA9\xAA\ay\x2\x2\xAA\xAB\aj\x2");
		sb.Append("\x2\xAB\xAC\ak\x2\x2\xAC\xAD\an\x2\x2\xAD\xAE\ag\x2\x2\xAE\x38");
		sb.Append("\x3\x2\x2\x2\xAF\xB0\a\x66\x2\x2\xB0\xB1\aq\x2\x2\xB1:\x3\x2");
		sb.Append("\x2\x2\xB2\xB3\ah\x2\x2\xB3\xB4\aq\x2\x2\xB4\xB5\at\x2\x2\xB5");
		sb.Append("<\x3\x2\x2\x2\xB6\xB7\av\x2\x2\xB7\xB8\aq\x2\x2\xB8>\x3\x2\x2");
		sb.Append("\x2\xB9\xBA\a\x64\x2\x2\xBA\xBB\at\x2\x2\xBB\xBC\ag\x2\x2\xBC");
		sb.Append("\xBD\a\x63\x2\x2\xBD\xBE\am\x2\x2\xBE@\x3\x2\x2\x2\xBF\xC0\a");
		sb.Append("n\x2\x2\xC0\xC1\ag\x2\x2\xC1\xC2\av\x2\x2\xC2\x42\x3\x2\x2\x2");
		sb.Append("\xC3\xC4\ak\x2\x2\xC4\xC5\ap\x2\x2\xC5\x44\x3\x2\x2\x2\xC6\xC7");
		sb.Append("\ag\x2\x2\xC7\xC8\ap\x2\x2\xC8\xC9\a\x66\x2\x2\xC9\x46\x3\x2");
		sb.Append("\x2\x2\xCA\xCB\a\x30\x2\x2\xCBH\x3\x2\x2\x2\xCC\xCD\av\x2\x2");
		sb.Append("\xCD\xCE\a{\x2\x2\xCE\xCF\ar\x2\x2\xCF\xD0\ag\x2\x2\xD0J\x3");
		sb.Append("\x2\x2\x2\xD1\xD2\ax\x2\x2\xD2\xD3\a\x63\x2\x2\xD3\xD4\at\x2");
		sb.Append("\x2\xD4L\x3\x2\x2\x2\xD5\xD6\a<\x2\x2\xD6N\x3\x2\x2\x2\xD7\xD8");
		sb.Append("\ah\x2\x2\xD8\xD9\aw\x2\x2\xD9\xDA\ap\x2\x2\xDA\xDB\a\x65\x2");
		sb.Append("\x2\xDB\xDC\av\x2\x2\xDC\xDD\ak\x2\x2\xDD\xDE\aq\x2\x2\xDE\xDF");
		sb.Append("\ap\x2\x2\xDFP\x3\x2\x2\x2\xE0\xE1\a\x63\x2\x2\xE1\xE2\at\x2");
		sb.Append("\x2\xE2\xE3\at\x2\x2\xE3\xE4\a\x63\x2\x2\xE4\xE5\a{\x2\x2\xE5");
		sb.Append("R\x3\x2\x2\x2\xE6\xE7\t\x2\x2\x2\xE7T\x3\x2\x2\x2\xE8\xE9\t");
		sb.Append("\x3\x2\x2\xE9V\x3\x2\x2\x2\xEA\xF3\a^\x2\x2\xEB\xF4\t\x4\x2");
		sb.Append("\x2\xEC\xEE\x5[.\x2\xED\xEC\x3\x2\x2\x2\xEE\xF1\x3\x2\x2\x2");
		sb.Append("\xEF\xED\x3\x2\x2\x2\xEF\xF0\x3\x2\x2\x2\xF0\xF2\x3\x2\x2\x2");
		sb.Append("\xF1\xEF\x3\x2\x2\x2\xF2\xF4\a^\x2\x2\xF3\xEB\x3\x2\x2\x2\xF3");
		sb.Append("\xEF\x3\x2\x2\x2\xF4X\x3\x2\x2\x2\xF5\xF8\t\x5\x2\x2\xF6\xF8");
		sb.Append("\x5W,\x2\xF7\xF5\x3\x2\x2\x2\xF7\xF6\x3\x2\x2\x2\xF8Z\x3\x2");
		sb.Append("\x2\x2\xF9\xFA\t\x6\x2\x2\xFA\\\x3\x2\x2\x2\xFB\xFC\a\x31\x2");
		sb.Append("\x2\xFC\xFD\a,\x2\x2\xFD\x102\x3\x2\x2\x2\xFE\x101\x5]/\x2\xFF");
		sb.Append("\x101\v\x2\x2\x2\x100\xFE\x3\x2\x2\x2\x100\xFF\x3\x2\x2\x2\x101");
		sb.Append("\x104\x3\x2\x2\x2\x102\x103\x3\x2\x2\x2\x102\x100\x3\x2\x2\x2");
		sb.Append("\x103\x105\x3\x2\x2\x2\x104\x102\x3\x2\x2\x2\x105\x106\a,\x2");
		sb.Append("\x2\x106\x107\a\x31\x2\x2\x107\x108\x3\x2\x2\x2\x108\x109\b");
		sb.Append("/\x2\x2\x109^\x3\x2\x2\x2\x10A\x10E\a$\x2\x2\x10B\x10D\x5Y-");
		sb.Append("\x2\x10C\x10B\x3\x2\x2\x2\x10D\x110\x3\x2\x2\x2\x10E\x10C\x3");
		sb.Append("\x2\x2\x2\x10E\x10F\x3\x2\x2\x2\x10F\x111\x3\x2\x2\x2\x110\x10E");
		sb.Append("\x3\x2\x2\x2\x111\x112\a$\x2\x2\x112`\x3\x2\x2\x2\x113\x115");
		sb.Append("\x5U+\x2\x114\x113\x3\x2\x2\x2\x115\x116\x3\x2\x2\x2\x116\x114");
		sb.Append("\x3\x2\x2\x2\x116\x117\x3\x2\x2\x2\x117\x62\x3\x2\x2\x2\x118");
		sb.Append("\x11E\x5S*\x2\x119\x11D\x5S*\x2\x11A\x11D\x5U+\x2\x11B\x11D");
		sb.Append("\a\x61\x2\x2\x11C\x119\x3\x2\x2\x2\x11C\x11A\x3\x2\x2\x2\x11C");
		sb.Append("\x11B\x3\x2\x2\x2\x11D\x120\x3\x2\x2\x2\x11E\x11C\x3\x2\x2\x2");
		sb.Append("\x11E\x11F\x3\x2\x2\x2\x11F\x64\x3\x2\x2\x2\x120\x11E\x3\x2");
		sb.Append("\x2\x2\x121\x123\x5[.\x2\x122\x121\x3\x2\x2\x2\x123\x124\x3");
		sb.Append("\x2\x2\x2\x124\x122\x3\x2\x2\x2\x124\x125\x3\x2\x2\x2\x125\x126");
		sb.Append("\x3\x2\x2\x2\x126\x127\b\x33\x2\x2\x127\x66\x3\x2\x2\x2\r\x2");
		sb.Append("\xEF\xF3\xF7\x100\x102\x10E\x116\x11C\x11E\x124\x3\b\x2\x2");
	    return sb.ToString();
	}

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN.ToCharArray());


}
