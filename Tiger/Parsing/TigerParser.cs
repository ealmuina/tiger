//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.6
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from D:\Zchool\Computer Science\4º\VII Semestre\Complementos de Compilación\Tiger\Tiger\Parsing\Tiger.g4 by ANTLR 4.6

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.6")]
[System.CLSCompliant(false)]
public partial class TigerParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, T__7=8, T__8=9, 
		T__9=10, T__10=11, T__11=12, T__12=13, T__13=14, T__14=15, T__15=16, T__16=17, 
		T__17=18, T__18=19, T__19=20, T__20=21, T__21=22, T__22=23, T__23=24, 
		T__24=25, T__25=26, T__26=27, T__27=28, T__28=29, T__29=30, T__30=31, 
		T__31=32, T__32=33, T__33=34, T__34=35, T__35=36, T__36=37, T__37=38, 
		T__38=39, T__39=40, COMMENT=41, STRING=42, INTEGER=43, ID=44, WS=45;
	public const int
		RULE_compileUnit = 0, RULE_expr = 1, RULE_lvalue = 2, RULE_decl = 3, RULE_type = 4, 
		RULE_type_fields = 5;
	public static readonly string[] ruleNames = {
		"compileUnit", "expr", "lvalue", "decl", "type", "type_fields"
	};

	private static readonly string[] _LiteralNames = {
		null, "'nil'", "'-'", "'*'", "'/'", "'+'", "'<>'", "'='", "'>='", "'<='", 
		"'>'", "'<'", "'&'", "'|'", "':='", "'('", "','", "')'", "';'", "'{'", 
		"'}'", "'['", "']'", "'of'", "'if'", "'then'", "'else'", "'while'", "'do'", 
		"'for'", "'to'", "'break'", "'let'", "'in'", "'end'", "'.'", "'type'", 
		"'var'", "':'", "'function'", "'array'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, "COMMENT", "STRING", "INTEGER", "ID", "WS"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "Tiger.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return _serializedATN; } }

	static TigerParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

	public TigerParser(ITokenStream input)
		: base(input)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}
	public partial class CompileUnitContext : ParserRuleContext {
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public ITerminalNode Eof() { return GetToken(TigerParser.Eof, 0); }
		public CompileUnitContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_compileUnit; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITigerVisitor<TResult> typedVisitor = visitor as ITigerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCompileUnit(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CompileUnitContext compileUnit() {
		CompileUnitContext _localctx = new CompileUnitContext(Context, State);
		EnterRule(_localctx, 0, RULE_compileUnit);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 12; expr(0);
			State = 13; Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExprContext : ParserRuleContext {
		public ExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expr; } }
	 
		public ExprContext() { }
		public virtual void CopyFrom(ExprContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class CallContext : ExprContext {
		public ITerminalNode ID() { return GetToken(TigerParser.ID, 0); }
		public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public CallContext(ExprContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITigerVisitor<TResult> typedVisitor = visitor as ITigerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCall(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ParenExprsContext : ExprContext {
		public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public ParenExprsContext(ExprContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITigerVisitor<TResult> typedVisitor = visitor as ITigerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParenExprs(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ForContext : ExprContext {
		public ExprContext e1;
		public ExprContext e2;
		public ExprContext e3;
		public ITerminalNode ID() { return GetToken(TigerParser.ID, 0); }
		public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public ForContext(ExprContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITigerVisitor<TResult> typedVisitor = visitor as ITigerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFor(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class BreakContext : ExprContext {
		public BreakContext(ExprContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITigerVisitor<TResult> typedVisitor = visitor as ITigerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBreak(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class LogicalContext : ExprContext {
		public ExprContext e1;
		public IToken op;
		public ExprContext e2;
		public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public LogicalContext(ExprContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITigerVisitor<TResult> typedVisitor = visitor as ITigerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLogical(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class UnaryMinusContext : ExprContext {
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public UnaryMinusContext(ExprContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITigerVisitor<TResult> typedVisitor = visitor as ITigerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUnaryMinus(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class StringContext : ExprContext {
		public ITerminalNode STRING() { return GetToken(TigerParser.STRING, 0); }
		public StringContext(ExprContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITigerVisitor<TResult> typedVisitor = visitor as ITigerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitString(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class WhileContext : ExprContext {
		public ExprContext e1;
		public ExprContext e2;
		public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public WhileContext(ExprContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITigerVisitor<TResult> typedVisitor = visitor as ITigerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWhile(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class IntegerContext : ExprContext {
		public ITerminalNode INTEGER() { return GetToken(TigerParser.INTEGER, 0); }
		public IntegerContext(ExprContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITigerVisitor<TResult> typedVisitor = visitor as ITigerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInteger(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class NilContext : ExprContext {
		public NilContext(ExprContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITigerVisitor<TResult> typedVisitor = visitor as ITigerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNil(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ArrayContext : ExprContext {
		public ExprContext e1;
		public ExprContext e2;
		public ITerminalNode ID() { return GetToken(TigerParser.ID, 0); }
		public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public ArrayContext(ExprContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITigerVisitor<TResult> typedVisitor = visitor as ITigerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArray(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ComparisonContext : ExprContext {
		public ExprContext e1;
		public IToken op;
		public ExprContext e2;
		public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public ComparisonContext(ExprContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITigerVisitor<TResult> typedVisitor = visitor as ITigerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitComparison(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AssignContext : ExprContext {
		public LvalueContext lvalue() {
			return GetRuleContext<LvalueContext>(0);
		}
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public AssignContext(ExprContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITigerVisitor<TResult> typedVisitor = visitor as ITigerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssign(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class RecordContext : ExprContext {
		public IToken typeID;
		public ITerminalNode[] ID() { return GetTokens(TigerParser.ID); }
		public ITerminalNode ID(int i) {
			return GetToken(TigerParser.ID, i);
		}
		public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public RecordContext(ExprContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITigerVisitor<TResult> typedVisitor = visitor as ITigerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRecord(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class LetContext : ExprContext {
		public DeclContext[] decl() {
			return GetRuleContexts<DeclContext>();
		}
		public DeclContext decl(int i) {
			return GetRuleContext<DeclContext>(i);
		}
		public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public LetContext(ExprContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITigerVisitor<TResult> typedVisitor = visitor as ITigerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLet(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class LValueContext : ExprContext {
		public LvalueContext lvalue() {
			return GetRuleContext<LvalueContext>(0);
		}
		public LValueContext(ExprContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITigerVisitor<TResult> typedVisitor = visitor as ITigerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLValue(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class IfContext : ExprContext {
		public ExprContext e1;
		public ExprContext e2;
		public ExprContext e3;
		public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public IfContext(ExprContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITigerVisitor<TResult> typedVisitor = visitor as ITigerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIf(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ArithmeticContext : ExprContext {
		public ExprContext e1;
		public IToken op;
		public ExprContext e2;
		public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public ArithmeticContext(ExprContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITigerVisitor<TResult> typedVisitor = visitor as ITigerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArithmetic(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExprContext expr() {
		return expr(0);
	}

	private ExprContext expr(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		ExprContext _localctx = new ExprContext(Context, _parentState);
		ExprContext _prevctx = _localctx;
		int _startState = 2;
		EnterRecursionRule(_localctx, 2, RULE_expr, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 117;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,10,Context) ) {
			case 1:
				{
				_localctx = new StringContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;

				State = 16; Match(STRING);
				}
				break;
			case 2:
				{
				_localctx = new IntegerContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 17; Match(INTEGER);
				}
				break;
			case 3:
				{
				_localctx = new NilContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 18; Match(T__0);
				}
				break;
			case 4:
				{
				_localctx = new LValueContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 19; lvalue(0);
				}
				break;
			case 5:
				{
				_localctx = new UnaryMinusContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 20; Match(T__1);
				State = 21; expr(15);
				}
				break;
			case 6:
				{
				_localctx = new AssignContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 22; lvalue(0);
				State = 23; Match(T__13);
				State = 24; expr(10);
				}
				break;
			case 7:
				{
				_localctx = new CallContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 26; Match(ID);
				State = 27; Match(T__14);
				State = 36;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__0) | (1L << T__1) | (1L << T__14) | (1L << T__23) | (1L << T__26) | (1L << T__28) | (1L << T__30) | (1L << T__31) | (1L << STRING) | (1L << INTEGER) | (1L << ID))) != 0)) {
					{
					State = 28; expr(0);
					State = 33;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					while (_la==T__15) {
						{
						{
						State = 29; Match(T__15);
						State = 30; expr(0);
						}
						}
						State = 35;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
					}
					}
				}

				State = 38; Match(T__16);
				}
				break;
			case 8:
				{
				_localctx = new ParenExprsContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 39; Match(T__14);
				State = 48;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__0) | (1L << T__1) | (1L << T__14) | (1L << T__23) | (1L << T__26) | (1L << T__28) | (1L << T__30) | (1L << T__31) | (1L << STRING) | (1L << INTEGER) | (1L << ID))) != 0)) {
					{
					State = 40; expr(0);
					State = 45;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					while (_la==T__17) {
						{
						{
						State = 41; Match(T__17);
						State = 42; expr(0);
						}
						}
						State = 47;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
					}
					}
				}

				State = 50; Match(T__16);
				}
				break;
			case 9:
				{
				_localctx = new RecordContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 51; ((RecordContext)_localctx).typeID = Match(ID);
				State = 52; Match(T__18);
				State = 65;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==ID) {
					{
					State = 53; Match(ID);
					State = 54; Match(T__6);
					State = 55; expr(0);
					State = 62;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					while (_la==T__15) {
						{
						{
						State = 56; Match(T__15);
						State = 57; Match(ID);
						State = 58; Match(T__6);
						State = 59; expr(0);
						}
						}
						State = 64;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
					}
					}
				}

				State = 67; Match(T__19);
				}
				break;
			case 10:
				{
				_localctx = new ArrayContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 68; Match(ID);
				State = 69; Match(T__20);
				State = 70; ((ArrayContext)_localctx).e1 = expr(0);
				State = 71; Match(T__21);
				State = 72; Match(T__22);
				State = 73; ((ArrayContext)_localctx).e2 = expr(6);
				}
				break;
			case 11:
				{
				_localctx = new IfContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 75; Match(T__23);
				State = 76; ((IfContext)_localctx).e1 = expr(0);
				State = 77; Match(T__24);
				State = 78; ((IfContext)_localctx).e2 = expr(0);
				State = 81;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,6,Context) ) {
				case 1:
					{
					State = 79; Match(T__25);
					State = 80; ((IfContext)_localctx).e3 = expr(0);
					}
					break;
				}
				}
				break;
			case 12:
				{
				_localctx = new WhileContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 83; Match(T__26);
				State = 84; ((WhileContext)_localctx).e1 = expr(0);
				State = 85; Match(T__27);
				State = 86; ((WhileContext)_localctx).e2 = expr(4);
				}
				break;
			case 13:
				{
				_localctx = new ForContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 88; Match(T__28);
				State = 89; Match(ID);
				State = 90; Match(T__13);
				State = 91; ((ForContext)_localctx).e1 = expr(0);
				State = 92; Match(T__29);
				State = 93; ((ForContext)_localctx).e2 = expr(0);
				State = 94; Match(T__27);
				State = 95; ((ForContext)_localctx).e3 = expr(3);
				}
				break;
			case 14:
				{
				_localctx = new BreakContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 97; Match(T__30);
				}
				break;
			case 15:
				{
				_localctx = new LetContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 98; Match(T__31);
				State = 102;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__35) | (1L << T__36) | (1L << T__38))) != 0)) {
					{
					{
					State = 99; decl();
					}
					}
					State = 104;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 105; Match(T__32);
				State = 114;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__0) | (1L << T__1) | (1L << T__14) | (1L << T__23) | (1L << T__26) | (1L << T__28) | (1L << T__30) | (1L << T__31) | (1L << STRING) | (1L << INTEGER) | (1L << ID))) != 0)) {
					{
					State = 106; expr(0);
					State = 111;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					while (_la==T__17) {
						{
						{
						State = 107; Match(T__17);
						State = 108; expr(0);
						}
						}
						State = 113;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
					}
					}
				}

				State = 116; Match(T__33);
				}
				break;
			}
			Context.Stop = TokenStream.LT(-1);
			State = 133;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,12,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 131;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,11,Context) ) {
					case 1:
						{
						_localctx = new ArithmeticContext(new ExprContext(_parentctx, _parentState));
						((ArithmeticContext)_localctx).e1 = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 119;
						if (!(Precpred(Context, 14))) throw new FailedPredicateException(this, "Precpred(Context, 14)");
						State = 120;
						((ArithmeticContext)_localctx).op = TokenStream.LT(1);
						_la = TokenStream.LA(1);
						if ( !(_la==T__2 || _la==T__3) ) {
							((ArithmeticContext)_localctx).op = ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 121; ((ArithmeticContext)_localctx).e2 = expr(15);
						}
						break;
					case 2:
						{
						_localctx = new ArithmeticContext(new ExprContext(_parentctx, _parentState));
						((ArithmeticContext)_localctx).e1 = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 122;
						if (!(Precpred(Context, 13))) throw new FailedPredicateException(this, "Precpred(Context, 13)");
						State = 123;
						((ArithmeticContext)_localctx).op = TokenStream.LT(1);
						_la = TokenStream.LA(1);
						if ( !(_la==T__1 || _la==T__4) ) {
							((ArithmeticContext)_localctx).op = ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 124; ((ArithmeticContext)_localctx).e2 = expr(14);
						}
						break;
					case 3:
						{
						_localctx = new ComparisonContext(new ExprContext(_parentctx, _parentState));
						((ComparisonContext)_localctx).e1 = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 125;
						if (!(Precpred(Context, 12))) throw new FailedPredicateException(this, "Precpred(Context, 12)");
						State = 126;
						((ComparisonContext)_localctx).op = TokenStream.LT(1);
						_la = TokenStream.LA(1);
						if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__5) | (1L << T__6) | (1L << T__7) | (1L << T__8) | (1L << T__9) | (1L << T__10))) != 0)) ) {
							((ComparisonContext)_localctx).op = ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 127; ((ComparisonContext)_localctx).e2 = expr(13);
						}
						break;
					case 4:
						{
						_localctx = new LogicalContext(new ExprContext(_parentctx, _parentState));
						((LogicalContext)_localctx).e1 = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 128;
						if (!(Precpred(Context, 11))) throw new FailedPredicateException(this, "Precpred(Context, 11)");
						State = 129;
						((LogicalContext)_localctx).op = TokenStream.LT(1);
						_la = TokenStream.LA(1);
						if ( !(_la==T__11 || _la==T__12) ) {
							((LogicalContext)_localctx).op = ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 130; ((LogicalContext)_localctx).e2 = expr(12);
						}
						break;
					}
					} 
				}
				State = 135;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,12,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class LvalueContext : ParserRuleContext {
		public LvalueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_lvalue; } }
	 
		public LvalueContext() { }
		public virtual void CopyFrom(LvalueContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class IndexLValueContext : LvalueContext {
		public LvalueContext lvalue() {
			return GetRuleContext<LvalueContext>(0);
		}
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public IndexLValueContext(LvalueContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITigerVisitor<TResult> typedVisitor = visitor as ITigerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIndexLValue(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class IdLValueContext : LvalueContext {
		public ITerminalNode ID() { return GetToken(TigerParser.ID, 0); }
		public IdLValueContext(LvalueContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITigerVisitor<TResult> typedVisitor = visitor as ITigerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIdLValue(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class FieldLValueContext : LvalueContext {
		public LvalueContext lvalue() {
			return GetRuleContext<LvalueContext>(0);
		}
		public ITerminalNode ID() { return GetToken(TigerParser.ID, 0); }
		public FieldLValueContext(LvalueContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITigerVisitor<TResult> typedVisitor = visitor as ITigerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFieldLValue(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LvalueContext lvalue() {
		return lvalue(0);
	}

	private LvalueContext lvalue(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		LvalueContext _localctx = new LvalueContext(Context, _parentState);
		LvalueContext _prevctx = _localctx;
		int _startState = 4;
		EnterRecursionRule(_localctx, 4, RULE_lvalue, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			_localctx = new IdLValueContext(_localctx);
			Context = _localctx;
			_prevctx = _localctx;

			State = 137; Match(ID);
			}
			Context.Stop = TokenStream.LT(-1);
			State = 149;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,14,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 147;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,13,Context) ) {
					case 1:
						{
						_localctx = new FieldLValueContext(new LvalueContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_lvalue);
						State = 139;
						if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
						State = 140; Match(T__34);
						State = 141; Match(ID);
						}
						break;
					case 2:
						{
						_localctx = new IndexLValueContext(new LvalueContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_lvalue);
						State = 142;
						if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
						State = 143; Match(T__20);
						State = 144; expr(0);
						State = 145; Match(T__21);
						}
						break;
					}
					} 
				}
				State = 151;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,14,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class DeclContext : ParserRuleContext {
		public DeclContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_decl; } }
	 
		public DeclContext() { }
		public virtual void CopyFrom(DeclContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class VarDeclContext : DeclContext {
		public ITerminalNode[] ID() { return GetTokens(TigerParser.ID); }
		public ITerminalNode ID(int i) {
			return GetToken(TigerParser.ID, i);
		}
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public VarDeclContext(DeclContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITigerVisitor<TResult> typedVisitor = visitor as ITigerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVarDecl(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class TypeDeclContext : DeclContext {
		public ITerminalNode ID() { return GetToken(TigerParser.ID, 0); }
		public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public TypeDeclContext(DeclContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITigerVisitor<TResult> typedVisitor = visitor as ITigerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypeDecl(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class FuncDeclContext : DeclContext {
		public ITerminalNode[] ID() { return GetTokens(TigerParser.ID); }
		public ITerminalNode ID(int i) {
			return GetToken(TigerParser.ID, i);
		}
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public Type_fieldsContext type_fields() {
			return GetRuleContext<Type_fieldsContext>(0);
		}
		public FuncDeclContext(DeclContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITigerVisitor<TResult> typedVisitor = visitor as ITigerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFuncDecl(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DeclContext decl() {
		DeclContext _localctx = new DeclContext(Context, State);
		EnterRule(_localctx, 6, RULE_decl);
		int _la;
		try {
			State = 177;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__35:
				_localctx = new TypeDeclContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 152; Match(T__35);
				State = 153; Match(ID);
				State = 154; Match(T__6);
				State = 155; type();
				}
				break;
			case T__36:
				_localctx = new VarDeclContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 156; Match(T__36);
				State = 157; Match(ID);
				State = 160;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__37) {
					{
					State = 158; Match(T__37);
					State = 159; Match(ID);
					}
				}

				State = 162; Match(T__13);
				State = 163; expr(0);
				}
				break;
			case T__38:
				_localctx = new FuncDeclContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 164; Match(T__38);
				State = 165; Match(ID);
				State = 166; Match(T__14);
				State = 168;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==ID) {
					{
					State = 167; type_fields();
					}
				}

				State = 170; Match(T__16);
				State = 173;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__37) {
					{
					State = 171; Match(T__37);
					State = 172; Match(ID);
					}
				}

				State = 175; Match(T__6);
				State = 176; expr(0);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeContext : ParserRuleContext {
		public TypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_type; } }
	 
		public TypeContext() { }
		public virtual void CopyFrom(TypeContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class ArrayTypeContext : TypeContext {
		public ITerminalNode ID() { return GetToken(TigerParser.ID, 0); }
		public ArrayTypeContext(TypeContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITigerVisitor<TResult> typedVisitor = visitor as ITigerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArrayType(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class RecordTypeContext : TypeContext {
		public Type_fieldsContext type_fields() {
			return GetRuleContext<Type_fieldsContext>(0);
		}
		public RecordTypeContext(TypeContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITigerVisitor<TResult> typedVisitor = visitor as ITigerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRecordType(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class IdTypeContext : TypeContext {
		public ITerminalNode ID() { return GetToken(TigerParser.ID, 0); }
		public IdTypeContext(TypeContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITigerVisitor<TResult> typedVisitor = visitor as ITigerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIdType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeContext type() {
		TypeContext _localctx = new TypeContext(Context, State);
		EnterRule(_localctx, 8, RULE_type);
		int _la;
		try {
			State = 188;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case ID:
				_localctx = new IdTypeContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 179; Match(ID);
				}
				break;
			case T__18:
				_localctx = new RecordTypeContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 180; Match(T__18);
				State = 182;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==ID) {
					{
					State = 181; type_fields();
					}
				}

				State = 184; Match(T__19);
				}
				break;
			case T__39:
				_localctx = new ArrayTypeContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 185; Match(T__39);
				State = 186; Match(T__22);
				State = 187; Match(ID);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Type_fieldsContext : ParserRuleContext {
		public ITerminalNode[] ID() { return GetTokens(TigerParser.ID); }
		public ITerminalNode ID(int i) {
			return GetToken(TigerParser.ID, i);
		}
		public Type_fieldsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_type_fields; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITigerVisitor<TResult> typedVisitor = visitor as ITigerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitType_fields(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Type_fieldsContext type_fields() {
		Type_fieldsContext _localctx = new Type_fieldsContext(Context, State);
		EnterRule(_localctx, 10, RULE_type_fields);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 190; Match(ID);
			State = 191; Match(T__37);
			State = 192; Match(ID);
			State = 199;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__15) {
				{
				{
				State = 193; Match(T__15);
				State = 194; Match(ID);
				State = 195; Match(T__37);
				State = 196; Match(ID);
				}
				}
				State = 201;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 1: return expr_sempred((ExprContext)_localctx, predIndex);
		case 2: return lvalue_sempred((LvalueContext)_localctx, predIndex);
		}
		return true;
	}
	private bool expr_sempred(ExprContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(Context, 14);
		case 1: return Precpred(Context, 13);
		case 2: return Precpred(Context, 12);
		case 3: return Precpred(Context, 11);
		}
		return true;
	}
	private bool lvalue_sempred(LvalueContext _localctx, int predIndex) {
		switch (predIndex) {
		case 4: return Precpred(Context, 2);
		case 5: return Precpred(Context, 1);
		}
		return true;
	}

	private static string _serializedATN = _serializeATN();
	private static string _serializeATN()
	{
	    StringBuilder sb = new StringBuilder();
	    sb.Append("\x3\x430\xD6D1\x8206\xAD2D\x4417\xAEF1\x8D80\xAADD\x3/\xCD");
		sb.Append("\x4\x2\t\x2\x4\x3\t\x3\x4\x4\t\x4\x4\x5\t\x5\x4\x6\t\x6\x4\a");
		sb.Append("\t\a\x3\x2\x3\x2\x3\x2\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3");
		sb.Append("\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\a");
		sb.Append("\x3\"\n\x3\f\x3\xE\x3%\v\x3\x5\x3\'\n\x3\x3\x3\x3\x3\x3\x3\x3");
		sb.Append("\x3\x3\x3\a\x3.\n\x3\f\x3\xE\x3\x31\v\x3\x5\x3\x33\n\x3\x3\x3");
		sb.Append("\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\a\x3");
		sb.Append("?\n\x3\f\x3\xE\x3\x42\v\x3\x5\x3\x44\n\x3\x3\x3\x3\x3\x3\x3");
		sb.Append("\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3");
		sb.Append("\x3\x3\x5\x3T\n\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3");
		sb.Append("\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3");
		sb.Append("\a\x3g\n\x3\f\x3\xE\x3j\v\x3\x3\x3\x3\x3\x3\x3\x3\x3\a\x3p\n");
		sb.Append("\x3\f\x3\xE\x3s\v\x3\x5\x3u\n\x3\x3\x3\x5\x3x\n\x3\x3\x3\x3");
		sb.Append("\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3");
		sb.Append("\x3\a\x3\x86\n\x3\f\x3\xE\x3\x89\v\x3\x3\x4\x3\x4\x3\x4\x3\x4");
		sb.Append("\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4\a\x4\x96\n\x4\f\x4");
		sb.Append("\xE\x4\x99\v\x4\x3\x5\x3\x5\x3\x5\x3\x5\x3\x5\x3\x5\x3\x5\x3");
		sb.Append("\x5\x5\x5\xA3\n\x5\x3\x5\x3\x5\x3\x5\x3\x5\x3\x5\x3\x5\x5\x5");
		sb.Append("\xAB\n\x5\x3\x5\x3\x5\x3\x5\x5\x5\xB0\n\x5\x3\x5\x3\x5\x5\x5");
		sb.Append("\xB4\n\x5\x3\x6\x3\x6\x3\x6\x5\x6\xB9\n\x6\x3\x6\x3\x6\x3\x6");
		sb.Append("\x3\x6\x5\x6\xBF\n\x6\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a\a\a");
		sb.Append("\xC8\n\a\f\a\xE\a\xCB\v\a\x3\a\x2\x4\x4\x6\b\x2\x4\x6\b\n\f");
		sb.Append("\x2\x6\x3\x2\x5\x6\x4\x2\x4\x4\a\a\x3\x2\b\r\x3\x2\xE\xF\xED");
		sb.Append("\x2\xE\x3\x2\x2\x2\x4w\x3\x2\x2\x2\x6\x8A\x3\x2\x2\x2\b\xB3");
		sb.Append("\x3\x2\x2\x2\n\xBE\x3\x2\x2\x2\f\xC0\x3\x2\x2\x2\xE\xF\x5\x4");
		sb.Append("\x3\x2\xF\x10\a\x2\x2\x3\x10\x3\x3\x2\x2\x2\x11\x12\b\x3\x1");
		sb.Append("\x2\x12x\a,\x2\x2\x13x\a-\x2\x2\x14x\a\x3\x2\x2\x15x\x5\x6\x4");
		sb.Append("\x2\x16\x17\a\x4\x2\x2\x17x\x5\x4\x3\x11\x18\x19\x5\x6\x4\x2");
		sb.Append("\x19\x1A\a\x10\x2\x2\x1A\x1B\x5\x4\x3\f\x1Bx\x3\x2\x2\x2\x1C");
		sb.Append("\x1D\a.\x2\x2\x1D&\a\x11\x2\x2\x1E#\x5\x4\x3\x2\x1F \a\x12\x2");
		sb.Append("\x2 \"\x5\x4\x3\x2!\x1F\x3\x2\x2\x2\"%\x3\x2\x2\x2#!\x3\x2\x2");
		sb.Append("\x2#$\x3\x2\x2\x2$\'\x3\x2\x2\x2%#\x3\x2\x2\x2&\x1E\x3\x2\x2");
		sb.Append("\x2&\'\x3\x2\x2\x2\'(\x3\x2\x2\x2(x\a\x13\x2\x2)\x32\a\x11\x2");
		sb.Append("\x2*/\x5\x4\x3\x2+,\a\x14\x2\x2,.\x5\x4\x3\x2-+\x3\x2\x2\x2");
		sb.Append(".\x31\x3\x2\x2\x2/-\x3\x2\x2\x2/\x30\x3\x2\x2\x2\x30\x33\x3");
		sb.Append("\x2\x2\x2\x31/\x3\x2\x2\x2\x32*\x3\x2\x2\x2\x32\x33\x3\x2\x2");
		sb.Append("\x2\x33\x34\x3\x2\x2\x2\x34x\a\x13\x2\x2\x35\x36\a.\x2\x2\x36");
		sb.Append("\x43\a\x15\x2\x2\x37\x38\a.\x2\x2\x38\x39\a\t\x2\x2\x39@\x5");
		sb.Append("\x4\x3\x2:;\a\x12\x2\x2;<\a.\x2\x2<=\a\t\x2\x2=?\x5\x4\x3\x2");
		sb.Append(">:\x3\x2\x2\x2?\x42\x3\x2\x2\x2@>\x3\x2\x2\x2@\x41\x3\x2\x2");
		sb.Append("\x2\x41\x44\x3\x2\x2\x2\x42@\x3\x2\x2\x2\x43\x37\x3\x2\x2\x2");
		sb.Append("\x43\x44\x3\x2\x2\x2\x44\x45\x3\x2\x2\x2\x45x\a\x16\x2\x2\x46");
		sb.Append("G\a.\x2\x2GH\a\x17\x2\x2HI\x5\x4\x3\x2IJ\a\x18\x2\x2JK\a\x19");
		sb.Append("\x2\x2KL\x5\x4\x3\bLx\x3\x2\x2\x2MN\a\x1A\x2\x2NO\x5\x4\x3\x2");
		sb.Append("OP\a\x1B\x2\x2PS\x5\x4\x3\x2QR\a\x1C\x2\x2RT\x5\x4\x3\x2SQ\x3");
		sb.Append("\x2\x2\x2ST\x3\x2\x2\x2Tx\x3\x2\x2\x2UV\a\x1D\x2\x2VW\x5\x4");
		sb.Append("\x3\x2WX\a\x1E\x2\x2XY\x5\x4\x3\x6Yx\x3\x2\x2\x2Z[\a\x1F\x2");
		sb.Append("\x2[\\\a.\x2\x2\\]\a\x10\x2\x2]^\x5\x4\x3\x2^_\a \x2\x2_`\x5");
		sb.Append("\x4\x3\x2`\x61\a\x1E\x2\x2\x61\x62\x5\x4\x3\x5\x62x\x3\x2\x2");
		sb.Append("\x2\x63x\a!\x2\x2\x64h\a\"\x2\x2\x65g\x5\b\x5\x2\x66\x65\x3");
		sb.Append("\x2\x2\x2gj\x3\x2\x2\x2h\x66\x3\x2\x2\x2hi\x3\x2\x2\x2ik\x3");
		sb.Append("\x2\x2\x2jh\x3\x2\x2\x2kt\a#\x2\x2lq\x5\x4\x3\x2mn\a\x14\x2");
		sb.Append("\x2np\x5\x4\x3\x2om\x3\x2\x2\x2ps\x3\x2\x2\x2qo\x3\x2\x2\x2");
		sb.Append("qr\x3\x2\x2\x2ru\x3\x2\x2\x2sq\x3\x2\x2\x2tl\x3\x2\x2\x2tu\x3");
		sb.Append("\x2\x2\x2uv\x3\x2\x2\x2vx\a$\x2\x2w\x11\x3\x2\x2\x2w\x13\x3");
		sb.Append("\x2\x2\x2w\x14\x3\x2\x2\x2w\x15\x3\x2\x2\x2w\x16\x3\x2\x2\x2");
		sb.Append("w\x18\x3\x2\x2\x2w\x1C\x3\x2\x2\x2w)\x3\x2\x2\x2w\x35\x3\x2");
		sb.Append("\x2\x2w\x46\x3\x2\x2\x2wM\x3\x2\x2\x2wU\x3\x2\x2\x2wZ\x3\x2");
		sb.Append("\x2\x2w\x63\x3\x2\x2\x2w\x64\x3\x2\x2\x2x\x87\x3\x2\x2\x2yz");
		sb.Append("\f\x10\x2\x2z{\t\x2\x2\x2{\x86\x5\x4\x3\x11|}\f\xF\x2\x2}~\t");
		sb.Append("\x3\x2\x2~\x86\x5\x4\x3\x10\x7F\x80\f\xE\x2\x2\x80\x81\t\x4");
		sb.Append("\x2\x2\x81\x86\x5\x4\x3\xF\x82\x83\f\r\x2\x2\x83\x84\t\x5\x2");
		sb.Append("\x2\x84\x86\x5\x4\x3\xE\x85y\x3\x2\x2\x2\x85|\x3\x2\x2\x2\x85");
		sb.Append("\x7F\x3\x2\x2\x2\x85\x82\x3\x2\x2\x2\x86\x89\x3\x2\x2\x2\x87");
		sb.Append("\x85\x3\x2\x2\x2\x87\x88\x3\x2\x2\x2\x88\x5\x3\x2\x2\x2\x89");
		sb.Append("\x87\x3\x2\x2\x2\x8A\x8B\b\x4\x1\x2\x8B\x8C\a.\x2\x2\x8C\x97");
		sb.Append("\x3\x2\x2\x2\x8D\x8E\f\x4\x2\x2\x8E\x8F\a%\x2\x2\x8F\x96\a.");
		sb.Append("\x2\x2\x90\x91\f\x3\x2\x2\x91\x92\a\x17\x2\x2\x92\x93\x5\x4");
		sb.Append("\x3\x2\x93\x94\a\x18\x2\x2\x94\x96\x3\x2\x2\x2\x95\x8D\x3\x2");
		sb.Append("\x2\x2\x95\x90\x3\x2\x2\x2\x96\x99\x3\x2\x2\x2\x97\x95\x3\x2");
		sb.Append("\x2\x2\x97\x98\x3\x2\x2\x2\x98\a\x3\x2\x2\x2\x99\x97\x3\x2\x2");
		sb.Append("\x2\x9A\x9B\a&\x2\x2\x9B\x9C\a.\x2\x2\x9C\x9D\a\t\x2\x2\x9D");
		sb.Append("\xB4\x5\n\x6\x2\x9E\x9F\a\'\x2\x2\x9F\xA2\a.\x2\x2\xA0\xA1\a");
		sb.Append("(\x2\x2\xA1\xA3\a.\x2\x2\xA2\xA0\x3\x2\x2\x2\xA2\xA3\x3\x2\x2");
		sb.Append("\x2\xA3\xA4\x3\x2\x2\x2\xA4\xA5\a\x10\x2\x2\xA5\xB4\x5\x4\x3");
		sb.Append("\x2\xA6\xA7\a)\x2\x2\xA7\xA8\a.\x2\x2\xA8\xAA\a\x11\x2\x2\xA9");
		sb.Append("\xAB\x5\f\a\x2\xAA\xA9\x3\x2\x2\x2\xAA\xAB\x3\x2\x2\x2\xAB\xAC");
		sb.Append("\x3\x2\x2\x2\xAC\xAF\a\x13\x2\x2\xAD\xAE\a(\x2\x2\xAE\xB0\a");
		sb.Append(".\x2\x2\xAF\xAD\x3\x2\x2\x2\xAF\xB0\x3\x2\x2\x2\xB0\xB1\x3\x2");
		sb.Append("\x2\x2\xB1\xB2\a\t\x2\x2\xB2\xB4\x5\x4\x3\x2\xB3\x9A\x3\x2\x2");
		sb.Append("\x2\xB3\x9E\x3\x2\x2\x2\xB3\xA6\x3\x2\x2\x2\xB4\t\x3\x2\x2\x2");
		sb.Append("\xB5\xBF\a.\x2\x2\xB6\xB8\a\x15\x2\x2\xB7\xB9\x5\f\a\x2\xB8");
		sb.Append("\xB7\x3\x2\x2\x2\xB8\xB9\x3\x2\x2\x2\xB9\xBA\x3\x2\x2\x2\xBA");
		sb.Append("\xBF\a\x16\x2\x2\xBB\xBC\a*\x2\x2\xBC\xBD\a\x19\x2\x2\xBD\xBF");
		sb.Append("\a.\x2\x2\xBE\xB5\x3\x2\x2\x2\xBE\xB6\x3\x2\x2\x2\xBE\xBB\x3");
		sb.Append("\x2\x2\x2\xBF\v\x3\x2\x2\x2\xC0\xC1\a.\x2\x2\xC1\xC2\a(\x2\x2");
		sb.Append("\xC2\xC9\a.\x2\x2\xC3\xC4\a\x12\x2\x2\xC4\xC5\a.\x2\x2\xC5\xC6");
		sb.Append("\a(\x2\x2\xC6\xC8\a.\x2\x2\xC7\xC3\x3\x2\x2\x2\xC8\xCB\x3\x2");
		sb.Append("\x2\x2\xC9\xC7\x3\x2\x2\x2\xC9\xCA\x3\x2\x2\x2\xCA\r\x3\x2\x2");
		sb.Append("\x2\xCB\xC9\x3\x2\x2\x2\x18#&/\x32@\x43Shqtw\x85\x87\x95\x97");
		sb.Append("\xA2\xAA\xAF\xB3\xB8\xBE\xC9");
	    return sb.ToString();
	}

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN.ToCharArray());


}
