//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.6
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from D:\Zchool\Computer Science\4º\VII Semestre\Complementos de Compilación\Tiger\Tiger\Parsing\Tiger.g4 by ANTLR 4.6

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.6")]
[System.CLSCompliant(false)]
public partial class TigerParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, T__7=8, T__8=9, 
		T__9=10, T__10=11, T__11=12, T__12=13, T__13=14, T__14=15, T__15=16, T__16=17, 
		T__17=18, T__18=19, T__19=20, T__20=21, T__21=22, T__22=23, T__23=24, 
		T__24=25, T__25=26, T__26=27, T__27=28, T__28=29, T__29=30, T__30=31, 
		T__31=32, T__32=33, T__33=34, T__34=35, T__35=36, T__36=37, T__37=38, 
		T__38=39, T__39=40, COMMENT=41, STRING=42, INTEGER=43, ID=44, WS=45;
	public const int
		RULE_compileUnit = 0, RULE_expr = 1, RULE_expr_seq = 2, RULE_expr_list = 3, 
		RULE_field_list = 4, RULE_lvalue = 5, RULE_decl = 6, RULE_type = 7, RULE_type_fields = 8;
	public static readonly string[] ruleNames = {
		"compileUnit", "expr", "expr_seq", "expr_list", "field_list", "lvalue", 
		"decl", "type", "type_fields"
	};

	private static readonly string[] _LiteralNames = {
		null, "'nil'", "'-'", "'*'", "'/'", "'+'", "'<>'", "'='", "'>='", "'<='", 
		"'>'", "'<'", "'&'", "'|'", "':='", "'('", "')'", "'{'", "'}'", "'['", 
		"']'", "'of'", "'if'", "'then'", "'else'", "'while'", "'do'", "'for'", 
		"'to'", "'break'", "'let'", "'in'", "'end'", "';'", "','", "'.'", "'type'", 
		"'var'", "':'", "'function'", "'array'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, "COMMENT", "STRING", "INTEGER", "ID", "WS"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "Tiger.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return _serializedATN; } }

	static TigerParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

	public TigerParser(ITokenStream input)
		: base(input)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}
	public partial class CompileUnitContext : ParserRuleContext {
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public ITerminalNode Eof() { return GetToken(TigerParser.Eof, 0); }
		public CompileUnitContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_compileUnit; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITigerVisitor<TResult> typedVisitor = visitor as ITigerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCompileUnit(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CompileUnitContext compileUnit() {
		CompileUnitContext _localctx = new CompileUnitContext(Context, State);
		EnterRule(_localctx, 0, RULE_compileUnit);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 18; expr(0);
			State = 19; Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExprContext : ParserRuleContext {
		public ExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expr; } }
	 
		public ExprContext() { }
		public virtual void CopyFrom(ExprContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class CallContext : ExprContext {
		public ITerminalNode ID() { return GetToken(TigerParser.ID, 0); }
		public Expr_listContext expr_list() {
			return GetRuleContext<Expr_listContext>(0);
		}
		public CallContext(ExprContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITigerVisitor<TResult> typedVisitor = visitor as ITigerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCall(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ParenExprsContext : ExprContext {
		public Expr_seqContext expr_seq() {
			return GetRuleContext<Expr_seqContext>(0);
		}
		public ParenExprsContext(ExprContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITigerVisitor<TResult> typedVisitor = visitor as ITigerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParenExprs(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class MulDivContext : ExprContext {
		public ExprContext e1;
		public IToken op;
		public ExprContext e2;
		public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public MulDivContext(ExprContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITigerVisitor<TResult> typedVisitor = visitor as ITigerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMulDiv(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AddSubContext : ExprContext {
		public ExprContext e1;
		public IToken op;
		public ExprContext e2;
		public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public AddSubContext(ExprContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITigerVisitor<TResult> typedVisitor = visitor as ITigerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAddSub(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ForContext : ExprContext {
		public ExprContext e1;
		public ExprContext e2;
		public ExprContext e3;
		public ITerminalNode ID() { return GetToken(TigerParser.ID, 0); }
		public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public ForContext(ExprContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITigerVisitor<TResult> typedVisitor = visitor as ITigerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFor(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class BreakContext : ExprContext {
		public BreakContext(ExprContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITigerVisitor<TResult> typedVisitor = visitor as ITigerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBreak(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class LogicalContext : ExprContext {
		public ExprContext e1;
		public IToken op;
		public ExprContext e2;
		public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public LogicalContext(ExprContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITigerVisitor<TResult> typedVisitor = visitor as ITigerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLogical(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class UnaryMinusContext : ExprContext {
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public UnaryMinusContext(ExprContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITigerVisitor<TResult> typedVisitor = visitor as ITigerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUnaryMinus(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class StringContext : ExprContext {
		public ITerminalNode STRING() { return GetToken(TigerParser.STRING, 0); }
		public StringContext(ExprContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITigerVisitor<TResult> typedVisitor = visitor as ITigerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitString(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class WhileContext : ExprContext {
		public ExprContext e1;
		public ExprContext e2;
		public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public WhileContext(ExprContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITigerVisitor<TResult> typedVisitor = visitor as ITigerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWhile(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class CompContext : ExprContext {
		public ExprContext e1;
		public IToken op;
		public ExprContext e2;
		public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public CompContext(ExprContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITigerVisitor<TResult> typedVisitor = visitor as ITigerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitComp(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class IntegerContext : ExprContext {
		public ITerminalNode INTEGER() { return GetToken(TigerParser.INTEGER, 0); }
		public IntegerContext(ExprContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITigerVisitor<TResult> typedVisitor = visitor as ITigerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInteger(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class NilContext : ExprContext {
		public NilContext(ExprContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITigerVisitor<TResult> typedVisitor = visitor as ITigerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNil(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ArrayContext : ExprContext {
		public ExprContext e1;
		public ExprContext e2;
		public ITerminalNode ID() { return GetToken(TigerParser.ID, 0); }
		public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public ArrayContext(ExprContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITigerVisitor<TResult> typedVisitor = visitor as ITigerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArray(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AssignContext : ExprContext {
		public LvalueContext lvalue() {
			return GetRuleContext<LvalueContext>(0);
		}
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public AssignContext(ExprContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITigerVisitor<TResult> typedVisitor = visitor as ITigerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssign(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class RecordContext : ExprContext {
		public ITerminalNode ID() { return GetToken(TigerParser.ID, 0); }
		public Field_listContext field_list() {
			return GetRuleContext<Field_listContext>(0);
		}
		public RecordContext(ExprContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITigerVisitor<TResult> typedVisitor = visitor as ITigerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRecord(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class LetContext : ExprContext {
		public DeclContext[] decl() {
			return GetRuleContexts<DeclContext>();
		}
		public DeclContext decl(int i) {
			return GetRuleContext<DeclContext>(i);
		}
		public Expr_seqContext expr_seq() {
			return GetRuleContext<Expr_seqContext>(0);
		}
		public LetContext(ExprContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITigerVisitor<TResult> typedVisitor = visitor as ITigerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLet(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class LValueContext : ExprContext {
		public LvalueContext lvalue() {
			return GetRuleContext<LvalueContext>(0);
		}
		public LValueContext(ExprContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITigerVisitor<TResult> typedVisitor = visitor as ITigerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLValue(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class IfContext : ExprContext {
		public ExprContext e1;
		public ExprContext e2;
		public ExprContext e3;
		public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public IfContext(ExprContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITigerVisitor<TResult> typedVisitor = visitor as ITigerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIf(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExprContext expr() {
		return expr(0);
	}

	private ExprContext expr(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		ExprContext _localctx = new ExprContext(Context, _parentState);
		ExprContext _prevctx = _localctx;
		int _startState = 2;
		EnterRecursionRule(_localctx, 2, RULE_expr, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 91;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,6,Context) ) {
			case 1:
				{
				_localctx = new StringContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;

				State = 22; Match(STRING);
				}
				break;
			case 2:
				{
				_localctx = new IntegerContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 23; Match(INTEGER);
				}
				break;
			case 3:
				{
				_localctx = new NilContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 24; Match(T__0);
				}
				break;
			case 4:
				{
				_localctx = new LValueContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 25; lvalue(0);
				}
				break;
			case 5:
				{
				_localctx = new UnaryMinusContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 26; Match(T__1);
				State = 27; expr(15);
				}
				break;
			case 6:
				{
				_localctx = new AssignContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 28; lvalue(0);
				State = 29; Match(T__13);
				State = 30; expr(10);
				}
				break;
			case 7:
				{
				_localctx = new CallContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 32; Match(ID);
				State = 33; Match(T__14);
				State = 35;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__0) | (1L << T__1) | (1L << T__14) | (1L << T__21) | (1L << T__24) | (1L << T__26) | (1L << T__28) | (1L << T__29) | (1L << STRING) | (1L << INTEGER) | (1L << ID))) != 0)) {
					{
					State = 34; expr_list();
					}
				}

				State = 37; Match(T__15);
				}
				break;
			case 8:
				{
				_localctx = new ParenExprsContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 38; Match(T__14);
				State = 40;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__0) | (1L << T__1) | (1L << T__14) | (1L << T__21) | (1L << T__24) | (1L << T__26) | (1L << T__28) | (1L << T__29) | (1L << STRING) | (1L << INTEGER) | (1L << ID))) != 0)) {
					{
					State = 39; expr_seq();
					}
				}

				State = 42; Match(T__15);
				}
				break;
			case 9:
				{
				_localctx = new RecordContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 43; Match(ID);
				State = 44; Match(T__16);
				State = 46;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==ID) {
					{
					State = 45; field_list();
					}
				}

				State = 48; Match(T__17);
				}
				break;
			case 10:
				{
				_localctx = new ArrayContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 49; Match(ID);
				State = 50; Match(T__18);
				State = 51; ((ArrayContext)_localctx).e1 = expr(0);
				State = 52; Match(T__19);
				State = 53; Match(T__20);
				State = 54; ((ArrayContext)_localctx).e2 = expr(6);
				}
				break;
			case 11:
				{
				_localctx = new IfContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 56; Match(T__21);
				State = 57; ((IfContext)_localctx).e1 = expr(0);
				State = 58; Match(T__22);
				State = 59; ((IfContext)_localctx).e2 = expr(0);
				State = 62;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,3,Context) ) {
				case 1:
					{
					State = 60; Match(T__23);
					State = 61; ((IfContext)_localctx).e3 = expr(0);
					}
					break;
				}
				}
				break;
			case 12:
				{
				_localctx = new WhileContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 64; Match(T__24);
				State = 65; ((WhileContext)_localctx).e1 = expr(0);
				State = 66; Match(T__25);
				State = 67; ((WhileContext)_localctx).e2 = expr(4);
				}
				break;
			case 13:
				{
				_localctx = new ForContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 69; Match(T__26);
				State = 70; Match(ID);
				State = 71; Match(T__13);
				State = 72; ((ForContext)_localctx).e1 = expr(0);
				State = 73; Match(T__27);
				State = 74; ((ForContext)_localctx).e2 = expr(0);
				State = 75; Match(T__27);
				State = 76; ((ForContext)_localctx).e3 = expr(3);
				}
				break;
			case 14:
				{
				_localctx = new BreakContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 78; Match(T__28);
				}
				break;
			case 15:
				{
				_localctx = new LetContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 79; Match(T__29);
				State = 83;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__35) | (1L << T__36) | (1L << T__38))) != 0)) {
					{
					{
					State = 80; decl();
					}
					}
					State = 85;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 86; Match(T__30);
				State = 88;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__0) | (1L << T__1) | (1L << T__14) | (1L << T__21) | (1L << T__24) | (1L << T__26) | (1L << T__28) | (1L << T__29) | (1L << STRING) | (1L << INTEGER) | (1L << ID))) != 0)) {
					{
					State = 87; expr_seq();
					}
				}

				State = 90; Match(T__31);
				}
				break;
			}
			Context.Stop = TokenStream.LT(-1);
			State = 107;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,8,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 105;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,7,Context) ) {
					case 1:
						{
						_localctx = new MulDivContext(new ExprContext(_parentctx, _parentState));
						((MulDivContext)_localctx).e1 = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 93;
						if (!(Precpred(Context, 14))) throw new FailedPredicateException(this, "Precpred(Context, 14)");
						State = 94;
						((MulDivContext)_localctx).op = TokenStream.LT(1);
						_la = TokenStream.LA(1);
						if ( !(_la==T__2 || _la==T__3) ) {
							((MulDivContext)_localctx).op = ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 95; ((MulDivContext)_localctx).e2 = expr(15);
						}
						break;
					case 2:
						{
						_localctx = new AddSubContext(new ExprContext(_parentctx, _parentState));
						((AddSubContext)_localctx).e1 = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 96;
						if (!(Precpred(Context, 13))) throw new FailedPredicateException(this, "Precpred(Context, 13)");
						State = 97;
						((AddSubContext)_localctx).op = TokenStream.LT(1);
						_la = TokenStream.LA(1);
						if ( !(_la==T__1 || _la==T__4) ) {
							((AddSubContext)_localctx).op = ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 98; ((AddSubContext)_localctx).e2 = expr(14);
						}
						break;
					case 3:
						{
						_localctx = new CompContext(new ExprContext(_parentctx, _parentState));
						((CompContext)_localctx).e1 = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 99;
						if (!(Precpred(Context, 12))) throw new FailedPredicateException(this, "Precpred(Context, 12)");
						State = 100;
						((CompContext)_localctx).op = TokenStream.LT(1);
						_la = TokenStream.LA(1);
						if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__5) | (1L << T__6) | (1L << T__7) | (1L << T__8) | (1L << T__9) | (1L << T__10))) != 0)) ) {
							((CompContext)_localctx).op = ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 101; ((CompContext)_localctx).e2 = expr(13);
						}
						break;
					case 4:
						{
						_localctx = new LogicalContext(new ExprContext(_parentctx, _parentState));
						((LogicalContext)_localctx).e1 = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 102;
						if (!(Precpred(Context, 11))) throw new FailedPredicateException(this, "Precpred(Context, 11)");
						State = 103;
						((LogicalContext)_localctx).op = TokenStream.LT(1);
						_la = TokenStream.LA(1);
						if ( !(_la==T__11 || _la==T__12) ) {
							((LogicalContext)_localctx).op = ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 104; ((LogicalContext)_localctx).e2 = expr(12);
						}
						break;
					}
					} 
				}
				State = 109;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,8,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class Expr_seqContext : ParserRuleContext {
		public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public Expr_seqContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expr_seq; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITigerVisitor<TResult> typedVisitor = visitor as ITigerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpr_seq(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Expr_seqContext expr_seq() {
		Expr_seqContext _localctx = new Expr_seqContext(Context, State);
		EnterRule(_localctx, 4, RULE_expr_seq);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 110; expr(0);
			State = 115;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__32) {
				{
				{
				State = 111; Match(T__32);
				State = 112; expr(0);
				}
				}
				State = 117;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Expr_listContext : ParserRuleContext {
		public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public Expr_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expr_list; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITigerVisitor<TResult> typedVisitor = visitor as ITigerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpr_list(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Expr_listContext expr_list() {
		Expr_listContext _localctx = new Expr_listContext(Context, State);
		EnterRule(_localctx, 6, RULE_expr_list);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 118; expr(0);
			State = 123;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__33) {
				{
				{
				State = 119; Match(T__33);
				State = 120; expr(0);
				}
				}
				State = 125;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Field_listContext : ParserRuleContext {
		public ITerminalNode[] ID() { return GetTokens(TigerParser.ID); }
		public ITerminalNode ID(int i) {
			return GetToken(TigerParser.ID, i);
		}
		public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public Field_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_field_list; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITigerVisitor<TResult> typedVisitor = visitor as ITigerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitField_list(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Field_listContext field_list() {
		Field_listContext _localctx = new Field_listContext(Context, State);
		EnterRule(_localctx, 8, RULE_field_list);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 126; Match(ID);
			State = 127; Match(T__6);
			State = 128; expr(0);
			State = 135;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__33) {
				{
				{
				State = 129; Match(T__33);
				State = 130; Match(ID);
				State = 131; Match(T__6);
				State = 132; expr(0);
				}
				}
				State = 137;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LvalueContext : ParserRuleContext {
		public LvalueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_lvalue; } }
	 
		public LvalueContext() { }
		public virtual void CopyFrom(LvalueContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class IndexLValueContext : LvalueContext {
		public LvalueContext lvalue() {
			return GetRuleContext<LvalueContext>(0);
		}
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public IndexLValueContext(LvalueContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITigerVisitor<TResult> typedVisitor = visitor as ITigerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIndexLValue(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class IdLValueContext : LvalueContext {
		public ITerminalNode ID() { return GetToken(TigerParser.ID, 0); }
		public IdLValueContext(LvalueContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITigerVisitor<TResult> typedVisitor = visitor as ITigerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIdLValue(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class FieldLValueContext : LvalueContext {
		public LvalueContext lvalue() {
			return GetRuleContext<LvalueContext>(0);
		}
		public ITerminalNode ID() { return GetToken(TigerParser.ID, 0); }
		public FieldLValueContext(LvalueContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITigerVisitor<TResult> typedVisitor = visitor as ITigerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFieldLValue(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LvalueContext lvalue() {
		return lvalue(0);
	}

	private LvalueContext lvalue(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		LvalueContext _localctx = new LvalueContext(Context, _parentState);
		LvalueContext _prevctx = _localctx;
		int _startState = 10;
		EnterRecursionRule(_localctx, 10, RULE_lvalue, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			_localctx = new IdLValueContext(_localctx);
			Context = _localctx;
			_prevctx = _localctx;

			State = 139; Match(ID);
			}
			Context.Stop = TokenStream.LT(-1);
			State = 151;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,13,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 149;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,12,Context) ) {
					case 1:
						{
						_localctx = new FieldLValueContext(new LvalueContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_lvalue);
						State = 141;
						if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
						State = 142; Match(T__34);
						State = 143; Match(ID);
						}
						break;
					case 2:
						{
						_localctx = new IndexLValueContext(new LvalueContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_lvalue);
						State = 144;
						if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
						State = 145; Match(T__18);
						State = 146; expr(0);
						State = 147; Match(T__19);
						}
						break;
					}
					} 
				}
				State = 153;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,13,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class DeclContext : ParserRuleContext {
		public DeclContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_decl; } }
	 
		public DeclContext() { }
		public virtual void CopyFrom(DeclContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class VarDeclContext : DeclContext {
		public ITerminalNode[] ID() { return GetTokens(TigerParser.ID); }
		public ITerminalNode ID(int i) {
			return GetToken(TigerParser.ID, i);
		}
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public VarDeclContext(DeclContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITigerVisitor<TResult> typedVisitor = visitor as ITigerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVarDecl(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class TypeDeclContext : DeclContext {
		public ITerminalNode ID() { return GetToken(TigerParser.ID, 0); }
		public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public TypeDeclContext(DeclContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITigerVisitor<TResult> typedVisitor = visitor as ITigerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypeDecl(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class FuncDeclContext : DeclContext {
		public ITerminalNode[] ID() { return GetTokens(TigerParser.ID); }
		public ITerminalNode ID(int i) {
			return GetToken(TigerParser.ID, i);
		}
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public Type_fieldsContext type_fields() {
			return GetRuleContext<Type_fieldsContext>(0);
		}
		public FuncDeclContext(DeclContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITigerVisitor<TResult> typedVisitor = visitor as ITigerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFuncDecl(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DeclContext decl() {
		DeclContext _localctx = new DeclContext(Context, State);
		EnterRule(_localctx, 12, RULE_decl);
		int _la;
		try {
			State = 179;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__35:
				_localctx = new TypeDeclContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 154; Match(T__35);
				State = 155; Match(ID);
				State = 156; Match(T__6);
				State = 157; type();
				}
				break;
			case T__36:
				_localctx = new VarDeclContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 158; Match(T__36);
				State = 159; Match(ID);
				State = 162;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__37) {
					{
					State = 160; Match(T__37);
					State = 161; Match(ID);
					}
				}

				State = 164; Match(T__13);
				State = 165; expr(0);
				}
				break;
			case T__38:
				_localctx = new FuncDeclContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 166; Match(T__38);
				State = 167; Match(ID);
				State = 168; Match(T__14);
				State = 170;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==ID) {
					{
					State = 169; type_fields();
					}
				}

				State = 172; Match(T__15);
				State = 175;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__37) {
					{
					State = 173; Match(T__37);
					State = 174; Match(ID);
					}
				}

				State = 177; Match(T__6);
				State = 178; expr(0);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeContext : ParserRuleContext {
		public TypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_type; } }
	 
		public TypeContext() { }
		public virtual void CopyFrom(TypeContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class ArrayTypeContext : TypeContext {
		public ITerminalNode ID() { return GetToken(TigerParser.ID, 0); }
		public ArrayTypeContext(TypeContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITigerVisitor<TResult> typedVisitor = visitor as ITigerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArrayType(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class RecordTypeContext : TypeContext {
		public Type_fieldsContext type_fields() {
			return GetRuleContext<Type_fieldsContext>(0);
		}
		public RecordTypeContext(TypeContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITigerVisitor<TResult> typedVisitor = visitor as ITigerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRecordType(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class IdTypeContext : TypeContext {
		public ITerminalNode ID() { return GetToken(TigerParser.ID, 0); }
		public IdTypeContext(TypeContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITigerVisitor<TResult> typedVisitor = visitor as ITigerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIdType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeContext type() {
		TypeContext _localctx = new TypeContext(Context, State);
		EnterRule(_localctx, 14, RULE_type);
		int _la;
		try {
			State = 190;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case ID:
				_localctx = new IdTypeContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 181; Match(ID);
				}
				break;
			case T__16:
				_localctx = new RecordTypeContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 182; Match(T__16);
				State = 184;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==ID) {
					{
					State = 183; type_fields();
					}
				}

				State = 186; Match(T__17);
				}
				break;
			case T__39:
				_localctx = new ArrayTypeContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 187; Match(T__39);
				State = 188; Match(T__20);
				State = 189; Match(ID);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Type_fieldsContext : ParserRuleContext {
		public ITerminalNode[] ID() { return GetTokens(TigerParser.ID); }
		public ITerminalNode ID(int i) {
			return GetToken(TigerParser.ID, i);
		}
		public Type_fieldsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_type_fields; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITigerVisitor<TResult> typedVisitor = visitor as ITigerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitType_fields(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Type_fieldsContext type_fields() {
		Type_fieldsContext _localctx = new Type_fieldsContext(Context, State);
		EnterRule(_localctx, 16, RULE_type_fields);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 192; Match(ID);
			State = 193; Match(T__37);
			State = 194; Match(ID);
			State = 201;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__33) {
				{
				{
				State = 195; Match(T__33);
				State = 196; Match(ID);
				State = 197; Match(T__37);
				State = 198; Match(ID);
				}
				}
				State = 203;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 1: return expr_sempred((ExprContext)_localctx, predIndex);
		case 5: return lvalue_sempred((LvalueContext)_localctx, predIndex);
		}
		return true;
	}
	private bool expr_sempred(ExprContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(Context, 14);
		case 1: return Precpred(Context, 13);
		case 2: return Precpred(Context, 12);
		case 3: return Precpred(Context, 11);
		}
		return true;
	}
	private bool lvalue_sempred(LvalueContext _localctx, int predIndex) {
		switch (predIndex) {
		case 4: return Precpred(Context, 2);
		case 5: return Precpred(Context, 1);
		}
		return true;
	}

	private static string _serializedATN = _serializeATN();
	private static string _serializeATN()
	{
	    StringBuilder sb = new StringBuilder();
	    sb.Append("\x3\x430\xD6D1\x8206\xAD2D\x4417\xAEF1\x8D80\xAADD\x3/\xCF");
		sb.Append("\x4\x2\t\x2\x4\x3\t\x3\x4\x4\t\x4\x4\x5\t\x5\x4\x6\t\x6\x4\a");
		sb.Append("\t\a\x4\b\t\b\x4\t\t\t\x4\n\t\n\x3\x2\x3\x2\x3\x2\x3\x3\x3\x3");
		sb.Append("\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3");
		sb.Append("\x3\x3\x3\x3\x5\x3&\n\x3\x3\x3\x3\x3\x3\x3\x5\x3+\n\x3\x3\x3");
		sb.Append("\x3\x3\x3\x3\x3\x3\x5\x3\x31\n\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3");
		sb.Append("\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x5");
		sb.Append("\x3\x41\n\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3");
		sb.Append("\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\a\x3");
		sb.Append("T\n\x3\f\x3\xE\x3W\v\x3\x3\x3\x3\x3\x5\x3[\n\x3\x3\x3\x5\x3");
		sb.Append("^\n\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3");
		sb.Append("\x3\x3\x3\x3\x3\x3\a\x3l\n\x3\f\x3\xE\x3o\v\x3\x3\x4\x3\x4\x3");
		sb.Append("\x4\a\x4t\n\x4\f\x4\xE\x4w\v\x4\x3\x5\x3\x5\x3\x5\a\x5|\n\x5");
		sb.Append("\f\x5\xE\x5\x7F\v\x5\x3\x6\x3\x6\x3\x6\x3\x6\x3\x6\x3\x6\x3");
		sb.Append("\x6\a\x6\x88\n\x6\f\x6\xE\x6\x8B\v\x6\x3\a\x3\a\x3\a\x3\a\x3");
		sb.Append("\a\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a\a\a\x98\n\a\f\a\xE\a\x9B\v");
		sb.Append("\a\x3\b\x3\b\x3\b\x3\b\x3\b\x3\b\x3\b\x3\b\x5\b\xA5\n\b\x3\b");
		sb.Append("\x3\b\x3\b\x3\b\x3\b\x3\b\x5\b\xAD\n\b\x3\b\x3\b\x3\b\x5\b\xB2");
		sb.Append("\n\b\x3\b\x3\b\x5\b\xB6\n\b\x3\t\x3\t\x3\t\x5\t\xBB\n\t\x3\t");
		sb.Append("\x3\t\x3\t\x3\t\x5\t\xC1\n\t\x3\n\x3\n\x3\n\x3\n\x3\n\x3\n\x3");
		sb.Append("\n\a\n\xCA\n\n\f\n\xE\n\xCD\v\n\x3\n\x2\x4\x4\f\v\x2\x4\x6\b");
		sb.Append("\n\f\xE\x10\x12\x2\x6\x3\x2\x5\x6\x4\x2\x4\x4\a\a\x3\x2\b\r");
		sb.Append("\x3\x2\xE\xF\xEB\x2\x14\x3\x2\x2\x2\x4]\x3\x2\x2\x2\x6p\x3\x2");
		sb.Append("\x2\x2\bx\x3\x2\x2\x2\n\x80\x3\x2\x2\x2\f\x8C\x3\x2\x2\x2\xE");
		sb.Append("\xB5\x3\x2\x2\x2\x10\xC0\x3\x2\x2\x2\x12\xC2\x3\x2\x2\x2\x14");
		sb.Append("\x15\x5\x4\x3\x2\x15\x16\a\x2\x2\x3\x16\x3\x3\x2\x2\x2\x17\x18");
		sb.Append("\b\x3\x1\x2\x18^\a,\x2\x2\x19^\a-\x2\x2\x1A^\a\x3\x2\x2\x1B");
		sb.Append("^\x5\f\a\x2\x1C\x1D\a\x4\x2\x2\x1D^\x5\x4\x3\x11\x1E\x1F\x5");
		sb.Append("\f\a\x2\x1F \a\x10\x2\x2 !\x5\x4\x3\f!^\x3\x2\x2\x2\"#\a.\x2");
		sb.Append("\x2#%\a\x11\x2\x2$&\x5\b\x5\x2%$\x3\x2\x2\x2%&\x3\x2\x2\x2&");
		sb.Append("\'\x3\x2\x2\x2\'^\a\x12\x2\x2(*\a\x11\x2\x2)+\x5\x6\x4\x2*)");
		sb.Append("\x3\x2\x2\x2*+\x3\x2\x2\x2+,\x3\x2\x2\x2,^\a\x12\x2\x2-.\a.");
		sb.Append("\x2\x2.\x30\a\x13\x2\x2/\x31\x5\n\x6\x2\x30/\x3\x2\x2\x2\x30");
		sb.Append("\x31\x3\x2\x2\x2\x31\x32\x3\x2\x2\x2\x32^\a\x14\x2\x2\x33\x34");
		sb.Append("\a.\x2\x2\x34\x35\a\x15\x2\x2\x35\x36\x5\x4\x3\x2\x36\x37\a");
		sb.Append("\x16\x2\x2\x37\x38\a\x17\x2\x2\x38\x39\x5\x4\x3\b\x39^\x3\x2");
		sb.Append("\x2\x2:;\a\x18\x2\x2;<\x5\x4\x3\x2<=\a\x19\x2\x2=@\x5\x4\x3");
		sb.Append("\x2>?\a\x1A\x2\x2?\x41\x5\x4\x3\x2@>\x3\x2\x2\x2@\x41\x3\x2");
		sb.Append("\x2\x2\x41^\x3\x2\x2\x2\x42\x43\a\x1B\x2\x2\x43\x44\x5\x4\x3");
		sb.Append("\x2\x44\x45\a\x1C\x2\x2\x45\x46\x5\x4\x3\x6\x46^\x3\x2\x2\x2");
		sb.Append("GH\a\x1D\x2\x2HI\a.\x2\x2IJ\a\x10\x2\x2JK\x5\x4\x3\x2KL\a\x1E");
		sb.Append("\x2\x2LM\x5\x4\x3\x2MN\a\x1E\x2\x2NO\x5\x4\x3\x5O^\x3\x2\x2");
		sb.Append("\x2P^\a\x1F\x2\x2QU\a \x2\x2RT\x5\xE\b\x2SR\x3\x2\x2\x2TW\x3");
		sb.Append("\x2\x2\x2US\x3\x2\x2\x2UV\x3\x2\x2\x2VX\x3\x2\x2\x2WU\x3\x2");
		sb.Append("\x2\x2XZ\a!\x2\x2Y[\x5\x6\x4\x2ZY\x3\x2\x2\x2Z[\x3\x2\x2\x2");
		sb.Append("[\\\x3\x2\x2\x2\\^\a\"\x2\x2]\x17\x3\x2\x2\x2]\x19\x3\x2\x2");
		sb.Append("\x2]\x1A\x3\x2\x2\x2]\x1B\x3\x2\x2\x2]\x1C\x3\x2\x2\x2]\x1E");
		sb.Append("\x3\x2\x2\x2]\"\x3\x2\x2\x2](\x3\x2\x2\x2]-\x3\x2\x2\x2]\x33");
		sb.Append("\x3\x2\x2\x2]:\x3\x2\x2\x2]\x42\x3\x2\x2\x2]G\x3\x2\x2\x2]P");
		sb.Append("\x3\x2\x2\x2]Q\x3\x2\x2\x2^m\x3\x2\x2\x2_`\f\x10\x2\x2`\x61");
		sb.Append("\t\x2\x2\x2\x61l\x5\x4\x3\x11\x62\x63\f\xF\x2\x2\x63\x64\t\x3");
		sb.Append("\x2\x2\x64l\x5\x4\x3\x10\x65\x66\f\xE\x2\x2\x66g\t\x4\x2\x2");
		sb.Append("gl\x5\x4\x3\xFhi\f\r\x2\x2ij\t\x5\x2\x2jl\x5\x4\x3\xEk_\x3\x2");
		sb.Append("\x2\x2k\x62\x3\x2\x2\x2k\x65\x3\x2\x2\x2kh\x3\x2\x2\x2lo\x3");
		sb.Append("\x2\x2\x2mk\x3\x2\x2\x2mn\x3\x2\x2\x2n\x5\x3\x2\x2\x2om\x3\x2");
		sb.Append("\x2\x2pu\x5\x4\x3\x2qr\a#\x2\x2rt\x5\x4\x3\x2sq\x3\x2\x2\x2");
		sb.Append("tw\x3\x2\x2\x2us\x3\x2\x2\x2uv\x3\x2\x2\x2v\a\x3\x2\x2\x2wu");
		sb.Append("\x3\x2\x2\x2x}\x5\x4\x3\x2yz\a$\x2\x2z|\x5\x4\x3\x2{y\x3\x2");
		sb.Append("\x2\x2|\x7F\x3\x2\x2\x2}{\x3\x2\x2\x2}~\x3\x2\x2\x2~\t\x3\x2");
		sb.Append("\x2\x2\x7F}\x3\x2\x2\x2\x80\x81\a.\x2\x2\x81\x82\a\t\x2\x2\x82");
		sb.Append("\x89\x5\x4\x3\x2\x83\x84\a$\x2\x2\x84\x85\a.\x2\x2\x85\x86\a");
		sb.Append("\t\x2\x2\x86\x88\x5\x4\x3\x2\x87\x83\x3\x2\x2\x2\x88\x8B\x3");
		sb.Append("\x2\x2\x2\x89\x87\x3\x2\x2\x2\x89\x8A\x3\x2\x2\x2\x8A\v\x3\x2");
		sb.Append("\x2\x2\x8B\x89\x3\x2\x2\x2\x8C\x8D\b\a\x1\x2\x8D\x8E\a.\x2\x2");
		sb.Append("\x8E\x99\x3\x2\x2\x2\x8F\x90\f\x4\x2\x2\x90\x91\a%\x2\x2\x91");
		sb.Append("\x98\a.\x2\x2\x92\x93\f\x3\x2\x2\x93\x94\a\x15\x2\x2\x94\x95");
		sb.Append("\x5\x4\x3\x2\x95\x96\a\x16\x2\x2\x96\x98\x3\x2\x2\x2\x97\x8F");
		sb.Append("\x3\x2\x2\x2\x97\x92\x3\x2\x2\x2\x98\x9B\x3\x2\x2\x2\x99\x97");
		sb.Append("\x3\x2\x2\x2\x99\x9A\x3\x2\x2\x2\x9A\r\x3\x2\x2\x2\x9B\x99\x3");
		sb.Append("\x2\x2\x2\x9C\x9D\a&\x2\x2\x9D\x9E\a.\x2\x2\x9E\x9F\a\t\x2\x2");
		sb.Append("\x9F\xB6\x5\x10\t\x2\xA0\xA1\a\'\x2\x2\xA1\xA4\a.\x2\x2\xA2");
		sb.Append("\xA3\a(\x2\x2\xA3\xA5\a.\x2\x2\xA4\xA2\x3\x2\x2\x2\xA4\xA5\x3");
		sb.Append("\x2\x2\x2\xA5\xA6\x3\x2\x2\x2\xA6\xA7\a\x10\x2\x2\xA7\xB6\x5");
		sb.Append("\x4\x3\x2\xA8\xA9\a)\x2\x2\xA9\xAA\a.\x2\x2\xAA\xAC\a\x11\x2");
		sb.Append("\x2\xAB\xAD\x5\x12\n\x2\xAC\xAB\x3\x2\x2\x2\xAC\xAD\x3\x2\x2");
		sb.Append("\x2\xAD\xAE\x3\x2\x2\x2\xAE\xB1\a\x12\x2\x2\xAF\xB0\a(\x2\x2");
		sb.Append("\xB0\xB2\a.\x2\x2\xB1\xAF\x3\x2\x2\x2\xB1\xB2\x3\x2\x2\x2\xB2");
		sb.Append("\xB3\x3\x2\x2\x2\xB3\xB4\a\t\x2\x2\xB4\xB6\x5\x4\x3\x2\xB5\x9C");
		sb.Append("\x3\x2\x2\x2\xB5\xA0\x3\x2\x2\x2\xB5\xA8\x3\x2\x2\x2\xB6\xF");
		sb.Append("\x3\x2\x2\x2\xB7\xC1\a.\x2\x2\xB8\xBA\a\x13\x2\x2\xB9\xBB\x5");
		sb.Append("\x12\n\x2\xBA\xB9\x3\x2\x2\x2\xBA\xBB\x3\x2\x2\x2\xBB\xBC\x3");
		sb.Append("\x2\x2\x2\xBC\xC1\a\x14\x2\x2\xBD\xBE\a*\x2\x2\xBE\xBF\a\x17");
		sb.Append("\x2\x2\xBF\xC1\a.\x2\x2\xC0\xB7\x3\x2\x2\x2\xC0\xB8\x3\x2\x2");
		sb.Append("\x2\xC0\xBD\x3\x2\x2\x2\xC1\x11\x3\x2\x2\x2\xC2\xC3\a.\x2\x2");
		sb.Append("\xC3\xC4\a(\x2\x2\xC4\xCB\a.\x2\x2\xC5\xC6\a$\x2\x2\xC6\xC7");
		sb.Append("\a.\x2\x2\xC7\xC8\a(\x2\x2\xC8\xCA\a.\x2\x2\xC9\xC5\x3\x2\x2");
		sb.Append("\x2\xCA\xCD\x3\x2\x2\x2\xCB\xC9\x3\x2\x2\x2\xCB\xCC\x3\x2\x2");
		sb.Append("\x2\xCC\x13\x3\x2\x2\x2\xCD\xCB\x3\x2\x2\x2\x17%*\x30@UZ]km");
		sb.Append("u}\x89\x97\x99\xA4\xAC\xB1\xB5\xBA\xC0\xCB");
	    return sb.ToString();
	}

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN.ToCharArray());


}
